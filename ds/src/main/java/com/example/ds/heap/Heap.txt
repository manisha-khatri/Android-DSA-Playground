Heap

- A heap is a Complete Binary Tree based data structure which satisfy heap properties
- Each parent can have at-most 2 children
- It is a complete binary tree, meaning all levels are fully filled except possibly the last level, which is filled from left to right.
- Max Heap: The parent node is always greater than or equal to its children.
- Min Heap: The parent node is always less than or equal to its children.
- Given an array, we treat it as a binary tree.
  - The parent node is at index i.
  - The left child is at 2*i + 1, and the right child is at 2*i + 2.

Heap Operations
- Insertion (O(log n))
- Deletion (O(log n))
- Heapify (O(log n))
- Peek (O(1)): Retrieve the min/max element without removing it.

Common Uses
- Priority Queues (e.g., Dijkstraâ€™s algorithm)
- Heap Sort (O(n log n))
- Finding k largest/smallest elements in O(n log k)
- Scheduling problems (CPU scheduling, job scheduling)

Heapify:
- We assume that the subtree at index i might be violating the heap property.
  - In a Max-Heap, a parent must be greater than or equal to its children.
  - In a Min-Heap, a parent must be less than or equal to its children.
- We check if the current node is smaller/larger than its children (depending on max/min heap).
  - If the parent is already greater (in a Max-Heap), no action is needed.
  - Otherwise, we swap the parent with the largest child.
- We recursively call Heapify on the swapped child node. This ensures the entire subtree maintains the heap property.




















