Jetpack Compose

- It simplifies UI development by allowing developers to build native UIs using Kotlin.

Why Use Jetpack Compose?
✅ Declarative UI – Describe what the UI should look like, and Compose updates it automatically.
✅ Less Boilerplate – No need for XML layouts; UI is written directly in Kotlin.
✅ Improved Performance – More efficient rendering compared to traditional Views.
✅ Composable Functions – Reusable UI components using @Composable functions.
✅ Seamless State Management – Works well with LiveData, ViewModel, and State.
✅ Interoperability – Works with existing View-based UI and XML.

How Jetpack Compose Works
- Instead of defining layouts in XML, you define them in Kotlin functions using @Composable.

-------------------------------------------------------
@Composable
fun Greeting(name: String) {
    Text(text = "Hello, $name!")
}

@Composable
fun MyScreen() {
    Column {
        Greeting("Manisha")
        Button(onClick = { /* Handle click */ }) {
            Text("Click Me")
        }
    }
}

- Greeting is a Composable function that displays text.
- MyScreen calls Greeting and a Button, all within a Column layout.

-------------------------------------------------------

Key Jetpack Compose Concepts

1. Composable Functions (@Composable)
    - Basic building blocks of a UI in Compose.
    - These functions describe how UI elements should look and behave.

2. State Management
    - Compose automatically re-renders UI when state changes.
    - Example using remember and mutableStateOf:

    @Composable
    fun Counter() {
        var count by remember { mutableStateOf(0) }
        Column {
            Text("Count: $count")
            Button(onClick = { count++ }) {
                Text("Increment")
            }
        }
    }

3. Layouts
    - Instead of XML layouts (ConstraintLayout, LinearLayout), Compose uses:
    - Column (vertical stacking)
    - Row (horizontal stacking)
    - Box (overlapping elements)
    - LazyColumn (efficient list like RecyclerView)

4. Modifiers
    - Used for styling and layout customization.

Text(
    text = "Hello, Compose!",
    modifier = Modifier.padding(16.dp)
)

-------------------------------------------------------
How to Get Started with Jetpack Compose

1. Enable Jetpack Compose in build.gradle
android {
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.0'
    }
}

dependencies {
    implementation "androidx.compose.ui:ui:1.5.0"
    implementation "androidx.compose.material3:material3:1.1.2"
}


2. Use setContent in MainActivity

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyScreen()
        }
    }
}
-------------------------------------------------------------------------------

- Jetpack Compose extends ComponentActivity() and not AppCompatActivity() because:
    - AppCompatActivity is mainly needed for apps using XML-based UI and legacy features like AppCompat themes, Toolbar, and FragmentActivity.
    - ComponentActivity is a lighter, more modern alternative designed for Compose-based apps.
    - Compose-Specific Lifecycle Handling























