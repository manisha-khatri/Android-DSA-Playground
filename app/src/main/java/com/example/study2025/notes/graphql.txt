Graphql

- A query language for APIs
- Gives power to the client to ask what they need.

- Declarative: You describe the shape of the data you want.
- Single Endpoint: Uses a single end point unlike REST
- Efficient: Reduces over fetching and under fetching


 Key Concepts:-

1. Query: Used to read data
{
    User(id: "123") {
        name
        email
    }
}

2. Mutation: Used to write (create/update/delete) data
mutation {
    addUser(name: "Manisha", email: "manishakhatri@gmail.com") {
        id
    }
}

3. Schema:
what queries and mutation are available and the shape of the data

4. Resolver
Functions that connects your schema to the backend/database - middleman between the API and actual data


Benefits:
- Frontend Control: Frontend team can fetch exactly what they need, no more no less
- Catch issues at compile time
- Version less - can evolve the schema


-------------------------------------------------------

- If your GraphQL schema only exposes these two queries:
type Query {
  countries: [Country!]!
  country(code: ID!): Country
}
- Then yesâ€”you can only use countries and country queries. That's your entire read-only interface into the data world.
























